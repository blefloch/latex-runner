% \iffalse
%% File: runner-brainfuck.dtx Copyright (C) 2013 Bruno Le Floch
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% -----------------------------------------------------------------------
% \fi
%
% \begin{runner-documentation}
%
% \section{The \plang{brainfuck} language}
%
% This \plang{brainfuck} implementation has an array, with cells
% numbered within \([-32768, 32767]\), and each cell can hold arbitrary
% integer values (in the range \([-2^{31}+1, 2^{31}-1]\). The brainfuck
% language has eight language commands.
% \begin{itemize}\def\makelabel#1{\hss\llap{\ttfamily#1}}
% \item[>] Increment the cell pointer.
% \item[<] Decrement the cell pointer.
% \item[+] Increment the value stored in the current cell.
% \item[-] Decrement the value stored in the current cell.
% \item[.] Output the ascii character corresponding to the value at the
%   pointer. Values outside the range of available characters
%   (\([0,255]\) or \([0,1114111]\) depending on the engine) raise an
%   error.
% \item[,] Read the first character of the input and store its character
%   code in the current cell. The end of the input string is marked by
%   the value \(-1\).
% \item[{[}] If the value at the current cell is zero, jump to the
%   matching \texttt{]}
% \item[{]}] If the value at the current cell is non-zero, jump to the
%   matching \texttt{[}.
% \end{itemize}
% Every other character is ignored.
%
% For example, here is a \enquote{Hello World!} program (from the
% Wikipedia page on \plang{brainfuck}). This program takes no input,
% hence we feed it an empty input.
% \begin{verbatim}
% \runner{brainfuck}[output = \result]@``Hello World!'' program
%   +++++ +++++
%     [ >+++++++ >++++++++++ >+++ >+ < < < < -]
%   >++.
%   >+.
%   +++++++.
%   .
%   +++.
%   >++.
%   < < +++++++++++++++.
%   >.
%   +++.
%   ------.
%   --------.
%   >+.
%   >.
% @@@
% \typeout{\result}
% \end{verbatim}
% An example which takes an input and copies it reversed to the output:
% \begin{verbatim}
% \runner{brainfuck}[output = \result]@-[>,+]<+[--.<+]@@Some input.@
% \typeout{\result}
% \end{verbatim}
%
% \end{runner-documentation}
%
% \begin{runner-implementation}
%
% \section{\plang{brainfuck} implementation}
%
% \subsection{Variables}
%
% \begin{variable}{\g_@@_brainfuck_array}
%   The array used by \plang{brainfuck}, and the cell number.
%    \begin{macrocode}
\@@_array_new:Nn \g_@@_brainfuck_array { 65536 }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_brainfuck_cell_int,
%     \l_@@_brainfuck_min_cell_int,
%     \l_@@_brainfuck_max_cell_int
%   }
%   The current cell number, and the minimal and maximal cell numbers
%   reached while running the program.  Those extrema must be known to
%   clear the (global) array for further \plang{brainfuck} programs.
%    \begin{macrocode}
\int_new:N \l_@@_brainfuck_cell_int
\int_new:N \l_@@_brainfuck_min_cell_int
\int_new:N \l_@@_brainfuck_max_cell_int
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}[int]{\@@_brainfuck_current_value:}
%   The value at the current cell.  This macro is protected, but can be
%   used within integer expressions.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_brainfuck_current_value:
  {
    \@@_array_item:NN \g_@@_brainfuck_array
      \l_@@_brainfuck_cell_int
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Running the code}
%
% \begin{macro}[int]{\@@_brainfuck_run:}
%   For simplicity, and because no one in their right mind would wish
%   for it, we balk at interactive mode.  This lets us collect all lines
%   of program and all lines of input once and for all.  Then check the
%   syntax, exiting in case of error.  Then ``compile'' the brainfuck
%   program to \TeX{} code, and run that code.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_brainfuck_run:
  {
    \@@_brainfuck_init:
    \@@_collect_sources:n { brainfuck }
    \@@_brainfuck_check_syntax:T
      {
        \@@_brainfuck_compile_run:
        \@@_brainfuck_cleanup:
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\@@_brainfuck_init:}
%   The brainfuck run starts at a cell in the middle of the array, and
%   the minimum and maximum cells visited are identical to that number
%   initially.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_brainfuck_init:
  {
    \int_set:Nn \l_@@_brainfuck_cell_int { 32769 }
    \int_set:Nn \l_@@_brainfuck_min_cell_int { 32769 }
    \int_set:Nn \l_@@_brainfuck_max_cell_int { 32769 }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Syntax checking}
%
% \begin{macro}[int, TF]{\@@_brainfuck_check_syntax:}
% \begin{macro}[aux]
%   {
%     \@@_brainfuck_syntax_aux:w,
%     \@@_brainfuck_syntax_auxii:nnn,
%     \@@_brainfuck_syntax_auxiii:nnn
%   }
%   Progressively replace pairs of |[| and |]| with letter tokens with
%   the same character codes (to get nice error messages).
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_brainfuck_check_syntax: { T }
  {
    \exp_after:wN \@@_brainfuck_syntax_aux:w \l_@@_program_str
      \q_mark \@@_brainfuck_syntax_auxii:nnn [ ]
      \q_mark \@@_brainfuck_syntax_auxiii:nnn \q_stop
  }
\cs_new_protected:Npn \@@_brainfuck_syntax_aux:w
    #1 [ #2 ] #3 \q_mark #4
  { #4 {#1} {#2} {#3} }
\group_begin:
  \char_set_lccode:nn { `C } { `[ }
  \char_set_lccode:nn { `D } { `] }
  \tex_lowercase:D
    {
      \cs_new_protected:Npn \@@_brainfuck_syntax_auxii:nnn #1#2#3
        { % [
          \tl_if_in:nnTF {#1} { ] }
            {
              \msg_error:nnnn
                { runner/brainfuck } { unmatched } { D } {#1}
              \use_i_delimit_by_q_stop:nw { \prg_return_false: }
            }
            {
              \@@_brainfuck_syntax_aux:w C #2 D #3
                \q_mark \@@_brainfuck_syntax_aux:w
            }
        }
      \cs_new_protected:Npn \@@_brainfuck_syntax_auxiii:nnn #1#2#3
        {
          \tl_if_empty:nTF {#2}
            { \use_i_delimit_by_q_stop:nw { \prg_return_true: } }
            {
              \msg_error:nnnn
                { runner/brainfuck } { unmatched } { C } { #1 C }
              \use_i_delimit_by_q_stop:nw { \prg_return_false: }
            }
        }
    }
\group_end:
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Compilation}
%
% \begin{macro}[int]{\@@_brainfuck_compile_run:}
% \begin{macro}[int, EXP]{\@@_brainfuck_compile_aux:N}
%   Within an \texttt{x}-expansion, go through the program string one
%   character at a time, converting the known characters to the
%   appropriate code.  The |[| and |]| characters will be converted to
%   code involving unmatched begin-group and end-group tokens,
%   respectively, hence it is important that syntax has been checked
%   beforehand.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_brainfuck_compile_run:
  {
    \use:x
      {
        \tl_map_function:NN \l_@@_program_str
          \@@_brainfuck_compile_aux:N
      }
  }
\cs_new:Npn \@@_brainfuck_compile_aux:N #1
  { \cs_if_exist_use:c { @@_brainfuck_#1_code: } }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int, EXP]{\@@_brainfuck_>_code:, \@@_brainfuck_<_code:}
% \begin{macro}[aux]{\@@_brainfuck_shift:NN}
%   Moving to the right or left.  We must keep track of the minimum and
%   maximum cells reached, hence the code is not simply to increment or
%   decrement the cell position.
%    \begin{macrocode}
\cs_new_nopar:cpn { @@_brainfuck_>_code: }
  {
    \@@_brainfuck_shift:NN
      \int_incr:N \l_@@_brainfuck_max_cell_int
  }
\cs_new_nopar:cpn { @@_brainfuck_<_code: }
  {
    \@@_brainfuck_shift:NN
      \int_decr:N \l_@@_brainfuck_min_cell_int
  }
\cs_new_protected:Npn \@@_brainfuck_shift:NN #1#2
  {
    \int_compare:nNnT #2 = \l_@@_brainfuck_cell_int { #1 #2 }
    #1 \l_@@_brainfuck_cell_int
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int, EXP]{\@@_brainfuck_+_code:, \@@_brainfuck_-_code:}
% \begin{macro}[int]{\@@_brainfuck_pm:N}
%   Incrementing or decrementing the current value, after ensuring that
%   the corresponding integer exists.
%    \begin{macrocode}
\cs_new_nopar:cpn { @@_brainfuck_+_code: }
  { \@@_brainfuck_pm:N + }
\cs_new_nopar:cpn { @@_brainfuck_-_code: }
  { \@@_brainfuck_pm:N - }
\cs_new_protected:Npn \@@_brainfuck_pm:N #1
  {
    \@@_array_gset:Nnn \g_@@_brainfuck_array
      \l_@@_brainfuck_cell_int
      { \@@_brainfuck_current_value: #1 1 }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int, EXP]{\@@_brainfuck_._code:}
%   Output the character corresponding to the value at the current cell.
%    \begin{macrocode}
\cs_new_nopar:cpn { @@_brainfuck_._code: }
  { \@@_output_char:n \@@_brainfuck_current_value: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int, EXP]+\@@_brainfuck_,:+
% \begin{macro}[int]{\@@_brainfuck_comma:}
%   Read off one character from the input string, and store its
%   character code in the current cell, or \(-1\) if the input has
%   ended.
%    \begin{macrocode}
\cs_new_nopar:cpn { @@_brainfuck_,_code: }
  { \@@_brainfuck_comma: }
\cs_new_protected_nopar:Npn \@@_brainfuck_comma:
  {
    \tl_if_empty:NTF \l_@@_input_str
      {
        \@@_array_gset:Nnn \g_@@_brainfuck_array
          \l_@@_brainfuck_cell_int \c_minus_one
      }
      {
        \tl_set:Nx \l_@@_tmpa_tl
          { \str_head:N \l_@@_input_str }
        \tl_set:Nx \l_@@_input_str
          { \str_tail:N \l_@@_input_str }
        \@@_array_gset:Nnn \g_@@_brainfuck_array
          \l_@@_brainfuck_cell_int
          { \exp_after:wN ` \l_@@_tmpa_tl }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}[int, EXP]{\@@_brainfuck_[_code:, \@@_brainfuck_]_code:}
% \begin{macro}[aux]{\@@_brainfuck_loop:n}
%   We already checked that |[| and |]| are correctly nested.  Convert
%   |[| to the \texttt{brainfuck_loop} function and a single |{|, and
%     convert |]| to a single |}|.  \TeX{} will take care of the
%   matching for us, and the argument of \cs{@@_brainfuck_loop:n} at run
%   time is the code corresponding to everything between |[| and the
%   matching~|]|.
%    \begin{macrocode}
\cs_new_nopar:cpn { @@_brainfuck_[_code: }
  { \@@_brainfuck_loop:n { \if_false: } \fi: }
\cs_new_nopar:cpn { @@_brainfuck_]_code: }
  { \if_false: { \fi: } }
\cs_new_protected_nopar:Npn \@@_brainfuck_loop:n
  { \int_until_do:nNnn \@@_brainfuck_current_value: = \c_zero }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Ending code}
%
% \begin{macro}[int]{\@@_brainfuck_cleanup:}
%   After the run, set all cells to zero.
%    \begin{macrocode}
\cs_new_protected_nopar:Npn \@@_brainfuck_cleanup:
  {
    \int_step_inline:nnnn
      \l_@@_brainfuck_min_cell_int
      \c_one
      \l_@@_brainfuck_max_cell_int
      { \@@_array_gset:Nnn \g_@@_brainfuck_array {##1} { 0 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \end{runner-implementation}
% \endinput