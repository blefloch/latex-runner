%%
%% This is file `runner-brainfuck.ldf',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% runner-brainfuck.dtx  (with options: `package')
%% 
%% Do not distribute a modified version of this file.
%% 
%% Communicate any suggestions for changing this package
%% to Bruno Le Floch (blflatex@gmail.com).
%% 
%% File: runner-brainfuck.dtx Copyright (C) 2013 Bruno Le Floch
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% -----------------------------------------------------------------------
\__runner_array_new:Nn \g__runner_brainfuck_array { 65536 }
\int_new:N \l__runner_brainfuck_cell_int
\int_new:N \l__runner_brainfuck_min_cell_int
\int_new:N \l__runner_brainfuck_max_cell_int
\cs_new_protected:Npn \__runner_brainfuck_current_value:
  {
    \__runner_array_item:NN \g__runner_brainfuck_array
      \l__runner_brainfuck_cell_int
  }
\cs_new_protected_nopar:Npn \__runner_brainfuck_run:
  {
    \__runner_brainfuck_init:
    \__runner_collect_sources:n { brainfuck }
    \__runner_brainfuck_check_syntax:T
      {
        \__runner_brainfuck_compile_run:
        \__runner_brainfuck_cleanup:
      }
  }
\cs_new_protected_nopar:Npn \__runner_brainfuck_init:
  {
    \int_set:Nn \l__runner_brainfuck_cell_int { 32769 }
    \int_set:Nn \l__runner_brainfuck_min_cell_int { 32769 }
    \int_set:Nn \l__runner_brainfuck_max_cell_int { 32769 }
  }
\prg_new_protected_conditional:Npnn \__runner_brainfuck_check_syntax: { T }
  {
    \exp_after:wN \__runner_brainfuck_syntax_aux:w \l__runner_program_str
      \q_mark \__runner_brainfuck_syntax_auxii:nnn [ ]
      \q_mark \__runner_brainfuck_syntax_auxiii:nnn \q_stop
  }
\cs_new_protected:Npn \__runner_brainfuck_syntax_aux:w
    #1 [ #2 ] #3 \q_mark #4
  { #4 {#1} {#2} {#3} }
\group_begin:
  \char_set_lccode:nn { `C } { `[ }
  \char_set_lccode:nn { `D } { `] }
  \tex_lowercase:D
    {
      \cs_new_protected:Npn \__runner_brainfuck_syntax_auxii:nnn #1#2#3
        { % [
          \tl_if_in:nnTF {#1} { ] }
            {
              \msg_error:nnnn
                { runner/brainfuck } { unmatched } { D } {#1}
              \use_i_delimit_by_q_stop:nw { \prg_return_false: }
            }
            {
              \__runner_brainfuck_syntax_aux:w C #2 D #3
                \q_mark \__runner_brainfuck_syntax_aux:w
            }
        }
      \cs_new_protected:Npn \__runner_brainfuck_syntax_auxiii:nnn #1#2#3
        {
          \tl_if_empty:nTF {#2}
            { \use_i_delimit_by_q_stop:nw { \prg_return_true: } }
            {
              \msg_error:nnnn
                { runner/brainfuck } { unmatched } { C } { #1 C }
              \use_i_delimit_by_q_stop:nw { \prg_return_false: }
            }
        }
    }
\group_end:
\cs_new_protected_nopar:Npn \__runner_brainfuck_compile_run:
  {
    \use:x
      {
        \tl_map_function:NN \l__runner_program_str
          \__runner_brainfuck_compile_aux:N
      }
  }
\cs_new:Npn \__runner_brainfuck_compile_aux:N #1
  { \cs_if_exist_use:c { __runner_brainfuck_#1_code: } }
\cs_new_nopar:cpn { __runner_brainfuck_>_code: }
  {
    \__runner_brainfuck_shift:NN
      \int_incr:N \l__runner_brainfuck_max_cell_int
  }
\cs_new_nopar:cpn { __runner_brainfuck_<_code: }
  {
    \__runner_brainfuck_shift:NN
      \int_decr:N \l__runner_brainfuck_min_cell_int
  }
\cs_new_protected:Npn \__runner_brainfuck_shift:NN #1#2
  {
    \int_compare:nNnT #2 = \l__runner_brainfuck_cell_int { #1 #2 }
    #1 \l__runner_brainfuck_cell_int
  }
\cs_new_nopar:cpn { __runner_brainfuck_+_code: }
  { \__runner_brainfuck_pm:N + }
\cs_new_nopar:cpn { __runner_brainfuck_-_code: }
  { \__runner_brainfuck_pm:N - }
\cs_new_protected:Npn \__runner_brainfuck_pm:N #1
  {
    \__runner_array_gset:Nnn \g__runner_brainfuck_array
      \l__runner_brainfuck_cell_int
      { \__runner_brainfuck_current_value: #1 1 }
  }
\cs_new_nopar:cpn { __runner_brainfuck_._code: }
  { \__runner_output_char:n \__runner_brainfuck_current_value: }
\cs_new_nopar:cpn { __runner_brainfuck_,_code: }
  { \__runner_brainfuck_comma: }
\cs_new_protected_nopar:Npn \__runner_brainfuck_comma:
  {
    \tl_if_empty:NTF \l__runner_input_str
      {
        \__runner_array_gset:Nnn \g__runner_brainfuck_array
          \l__runner_brainfuck_cell_int \c_minus_one
      }
      {
        \tl_set:Nx \l__runner_tmpa_tl
          { ` \str_head:N \l__runner_input_str }
        \__runner_array_gset:Nnn \g__runner_brainfuck_array
          \l__runner_brainfuck_cell_int
          { \l__runner_tmpa_tl }
        \tl_set:Nx \l__runner_input_str
          { \str_tail:N \l__runner_input_str }
      }
  }
\cs_new_nopar:cpn { __runner_brainfuck_[_code: }
  { \__runner_brainfuck_loop:n { \if_false: } \fi: }
\cs_new_nopar:cpn { __runner_brainfuck_]_code: }
  { \if_false: { \fi: } }
\cs_new_protected_nopar:Npn \__runner_brainfuck_loop:n
  { \int_until_do:nNnn \__runner_brainfuck_current_value: = \c_zero }
\cs_new_protected_nopar:Npn \__runner_brainfuck_cleanup:
  {
    \int_step_inline:nnnn
      \l__runner_brainfuck_min_cell_int
      \c_one
      \l__runner_brainfuck_max_cell_int
      { \__runner_array_gset:Nnn \g__runner_brainfuck_array {##1} { 0 } }
  }
\msg_new:nnn { runner/brainfuck } { unmatched }
  { Unmatched~'#1'~in~'...#2...'. }
%% 
%%
%% End of file `runner-brainfuck.ldf'.
